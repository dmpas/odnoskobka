Перем юТест;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтениеЗаписьОдногоЭлемента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтениеЗаписьМассива");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтениеЗаписьРазныхТипов");

	Возврат ВсеТесты;
	
КонецФункции

Процедура ТестДолжен_ПроверитьЧтениеЗаписьОдногоЭлемента() Экспорт

	З = Новый ЗаписьСкобаря;
	З.ЗаписатьНачалоЭлемента();
	З.ЗаписатьЗначение(1);
	З.ЗаписатьЗначение(2);
	З.ЗаписатьЗначение(3);
	З.ЗаписатьНачалоЭлемента();
	З.ЗаписатьЗначение("""N""");
	З.ЗаписатьЗначение(15);
	З.ЗаписатьКонецЭлемента();
	З.ЗаписатьКонецЭлемента();

	Итог = З.Закрыть();

	юТест.ПроверитьРавенство(Итог, "{1,2,3,
	|{""N"",15}
	|}");

	Ч = Новый ЧтениеСкобаря;
	Ч.УстановитьСтроку(Итог);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Первая скобка"); // {
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.НачалоЭлемента);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Число 1"); // 1
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.Значение);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Число 2"); // 2
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.Значение);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Число 3"); // 3
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.Значение);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Вторая скобка"); // {
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.НачалоЭлемента);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Строка N"); // "N"
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.Значение);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Число 15"); // 15
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.Значение);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Закрывающая скобка"); // }
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.КонецЭлемента);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Закрывающая скобка"); // }
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.КонецЭлемента);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Ложь, "Больше нечего считывать");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтениеЗаписьМассива() Экспорт

	М = Новый Массив;
	М.Добавить(1);
	М.Добавить(2);
	М.Добавить(3);
	
	З = Новый ЗаписьСкобаря;
	З.ЗаписатьМассив(М);
	Итог = З.Закрыть();

	юТест.ПроверитьРавенство(Итог, "{1,2,3}");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтениеЗаписьРазныхТипов() Экспорт

	ТестовыеДанные = "{{""St""""
	|ring"", 1, 01234567-abcd-efab-cdef-0123456789ab, -1, f1234567-abcd-efab-cdef-0123456789ab}}";

	Ч = Новый ЧтениеСкобаря;
	Ч.УстановитьСтроку(ТестовыеДанные);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Первая скобка"); // {
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.НачалоЭлемента);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Вторая скобка"); // {
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.НачалоЭлемента);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Строка"); // String
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.Значение);

	юТест.ПроверитьРавенство(Ч.Значение, "St""
		|ring", "Строка St""ring"); 

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Число"); // 1
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.Значение);
	юТест.ПроверитьРавенство(Ч.Значение, 1, "Число 1"); 

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "ГУИД"); //
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.Значение);
	юТест.ПроверитьРавенство(Ч.Значение, Новый УникальныйИдентификатор("01234567-abcd-efab-cdef-0123456789ab"), "Гуид с числа"); 

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Число"); // -1
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.Значение);
	юТест.ПроверитьРавенство(Ч.Значение, -1, "Число -1"); 

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "ГУИД"); //
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.Значение);
	юТест.ПроверитьРавенство(Ч.Значение, Новый УникальныйИдентификатор("f1234567-abcd-efab-cdef-0123456789ab"), "Гуид с буквы"); 

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Закрывающая скобка"); // }
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.КонецЭлемента);

	юТест.ПроверитьРавенство(Ч.Прочитать(), Истина, "Закрывающая скобка"); // }
	юТест.ПроверитьРавенство(Ч.ТипЭлемента, ТипУзлаСкобаря.КонецЭлемента);

КонецПроцедуры
